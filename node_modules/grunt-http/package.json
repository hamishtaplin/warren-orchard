{
  "name": "grunt-http",
  "description": "Sends a HTTP request and deals with the response.",
  "version": "0.0.2",
  "homepage": "https://github.com/johngeorgewright/grunt-http",
  "author": {
    "name": "John Wright",
    "email": "johngeorge.wright@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/johngeorgewright/grunt-http.git"
  },
  "bugs": {
    "url": "https://github.com/johngeorgewright/grunt-http/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/johngeorgewright/grunt-http/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "sinon": "~1.7.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "request",
    "http"
  ],
  "dependencies": {
    "request": "~2.21.0"
  },
  "readme": "# grunt-http\n\n> Sends a HTTP request and deals with the response.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-http --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-http');\n```\n\n## The \"http\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `http` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  http: {\n    your_service: {\n      url: 'your/url.com',\n      dest: 'optional/file/to/save/response'\n    }\n  }\n})\n```\n\n### Options\n\n- `uri || url` - fully qualified uri or a parsed url object from url.parse(). REQUIRED.\n- `dest` - A destination file to save the response.\n- `qs` - object containing querystring values to be appended to the uri\n- `method` - http method, defaults to GET\n- `headers` - http headers, defaults to {}\n- `body` - entity body for PATCH, POST and PUT requests. Must be buffer or string.\n- `form` - when passed an object this will set body but to a querystring representation of value and adds Content-type: application/x-www-form-urlencoded; charset=utf-8 header. When passed no option a FormData instance is returned that will be piped to request.\n- `auth` - A hash containing values user || username, password || pass, and sendImmediately (optional). See documentation above.\n- `json` - sets body but to JSON representation of value and adds Content-type: application/json header. Additionally, parses the response body as json.\n- `multipart` - (experimental) array of objects which contains their own headers and body attribute. Sends multipart/related request. See example below.\n- `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n- `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n- `encoding` - Encoding to be used on setEncoding of response data. If set to null, the body is returned as a Buffer.\n- `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node's default maxSockets.\n- `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n- `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\n- `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it's supported with the url parameter by embedding the auth info in the uri.\n- `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n- `hawk` - Options for Hawk signing. The credentials key must contain the necessary signing info, see hawk docs for details.\n- `strictSSL` - Set to true to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n- `jar` - Set to false if you don't want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n- `aws` - object containing aws signing information, should have the properties key and secret as well as bucket unless you're specifying your bucket as part of the path, or you are making a request that doesn't use a bucket (i.e. GET Services)\n- `httpSignature` - Options for the HTTP Signature Scheme using Joyent's library. The keyId and key properties must be specified. See the docs for other options.\n- `localAddress` - Local interface to bind for network connections.\n\n### Usage Examples\n\n#### Google Closure\nIn this example, we're using google's closure service to compile a JS file.\n\n```js\ngrunt.initConfig({\n  http: {\n    closure: {\n      url: 'http://closure-compiler.appspot.com/compile',\n      method: 'POST',\n      form: {\n        output_info: 'compiled_code',\n        output_format: 'text',\n        compilation_level: 'SIMPLE_OPTIMIZATIONS',\n        warning_level: 'default',\n        js_code: grunt.file.read('src/main.js')\n      },\n      dest: 'build/main.js'\n    }\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\nv0.0.1 - Initial release\nv0.0.2 - Fixing debugging problems\n",
  "readmeFilename": "README.md",
  "_id": "grunt-http@0.0.2",
  "dist": {
    "shasum": "f93f5a49fab442d35098b3dd0779afe62a0d0659"
  },
  "_from": "grunt-http@0.0.2",
  "_resolved": "https://registry.npmjs.org/grunt-http/-/grunt-http-0.0.2.tgz"
}
